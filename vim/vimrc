set nocompatible
filetype off

if has('nvim')
    let s:editor_root=expand("~/.config/nvim")
else
    let s:editor_root=expand("~/.vim")
endif

call plug#begin(s:editor_root . '/plugged')

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'junegunn/fzf'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-projectionist'
Plug 'euclio/gitignore.vim'
Plug 'scrooloose/syntastic'
Plug 'vim-scripts/ctags.vim'
Plug 'majutsushi/tagbar'
Plug 'fisadev/vim-isort'
Plug 'ntpeters/vim-better-whitespace'
Plug 'ervandew/supertab'
Plug 'tpope/vim-commentary'
Plug 'mattreduce/vim-mix'
Plug 'yggdroot/indentline'
Plug 'majutsushi/tagbar'
Plug 'janko/vim-test'
Plug 'chrisbra/csv.vim'
Plug 'vim-scripts/ctags.vim'
Plug 'wsdjeg/FlyGrep.vim'
Plug 'vim-airline/vim-airline'
Plug 'elixir-editors/vim-elixir'
Plug 'rust-lang/rust.vim'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'vim-scripts/mru.vim'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
" Color schemes
Plug 'dracula/vim'

call plug#end()

set encoding=utf-8
set number
set ruler
filetype plugin indent on
syntax enable

set t_Co=256
set background=dark

" Whitespace
set nowrap
set tabstop=4 shiftwidth=4
set expandtab
set backspace=indent,eol,start
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full

" Status bar
set laststatus=2

" Show (partial) command in the status line
set showcmd

" use comma as <Leader> key instead of backslash
" let mapleader=","

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Clipboard
imap <buffer><Tab> <C-Space>
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+p

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

let g:tagbar_autofocus = 0

noremap <C-e> :Eval <CR>
noremap E :%Eval <CR>

" GUI
set guifont=Fira\ Code:h14
colorscheme dracula

" indentline changes conceal
let g:indentLine_setConceal = 0

" nvim q
set guicursor=

map <leader>t :CtrlP<cr>
map <leader>T :CtrlPBuffer<cr>

nmap <F8> :TagbarToggle<CR>

let g:python3_host_prog='/Users/thulio/.asdf/installs/python/3.7.6/bin/python'
let g:python_host_prog='/Users/thulio/.asdf/installs/python/2.7.17/bin/python'

set hidden

let g:LanguageClient_serverCommands = {
    \ 'python': ['~/.asdf/installs/python/3.7.6/bin/pyls'],
    \ 'rust': ['~/.asdf/shims/rustup', 'run', 'stable', 'rls'],
    \ 'elixir': ['~/projects/github/elixir-ls/release/language_server.sh'],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
nnoremap <silent> gvd :call LanguageClient#textDocument_definition({'gotoCmd': 'vsplit'})<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

autocmd BufWritePre *.ex,*.exs,*.py :call LanguageClient#textDocument_formatting_sync()

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:projectionist_heuristics = {}

let g:projectionist_heuristics['mix.exs'] = {
            \ 'apps/*/mix.exs': { 'type': 'app' },
            \ 'lib/*.ex': {
            \   'type': 'lib',
            \   'alternate': 'test/{}_test.exs',
            \   'template': ['defmodule {camelcase|capitalize|dot} do', 'end'],
            \ },
            \ 'test/*_test.exs': {
            \   'type': 'test',
            \   'alternate': 'lib/{}.ex',
            \   'template': [
            \       'defmodule {camelcase|capitalize|dot}Test do',
            \       '  use ExUnit.Case',
            \       '',
            \       '  alias {camelcase|capitalize|dot}, as: Subject',
            \       '',
            \       '  doctest Subject',
            \       'end'
            \   ],
            \ },
            \ 'mix.exs': { 'type': 'mix' },
            \ 'config/*.exs': { 'type': 'config' },
            \ '*.ex': {
            \   'makery': {
            \     'lint': { 'compiler': 'credo' },
            \     'test': { 'compiler': 'exunit' },
            \     'build': { 'compiler': 'mix' }
            \   }
            \ },
            \ '*.exs': {
            \   'makery': {
            \     'lint': { 'compiler': 'credo' },
            \     'test': { 'compiler': 'exunit' },
            \     'build': { 'compiler': 'mix' }
            \   }
            \ }
            \ }

let g:projectionist_heuristics['rebar.config'] = {
            \ '*.erl': {
            \   'template': ['-module({basename}).', '', '-export([]).', ''],
            \ },
            \ 'src/*.app.src': { 'type': 'app' },
            \ 'src/*.erl': {
            \   'type': 'src',
            \   'alternate': 'test/{}_SUITE.erl',
            \ },
            \ 'test/*_SUITE.erl': {
            \   'type': 'test',
            \   'alternate': 'src/{}.erl',
            \ },
            \ 'rebar.config': { 'type': 'rebar' }
            \ }

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END
