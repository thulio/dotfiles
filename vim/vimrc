set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'VundleVim/Vundle.vim'

" Navigation
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/ZoomWin'
Plugin 'bling/vim-bufferline'
Plugin 'itchyny/lightline.vim'

" Misc programming
Plugin 'scrooloose/syntastic'
Plugin 'ctags.vim'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'tpope/vim-fugitive'
Plugin 'sickill/vim-pasta'
Plugin 'vim-scripts/tComment'
Plugin 'airblade/vim-gitgutter'

" Python
"Plugin 'klen/python-mode'
Plugin 'nvie/vim-flake8'
Plugin 'davidhalter/jedi-vim'

" Clojure
Plugin 'junegunn/limelight.vim'
"Plugin 'venantius/vim-eastwood'
Plugin 'venantius/vim-cljfmt'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'tpope/vim-fireplace'
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-classpath.git'
Plugin 'vim-scripts/paredit.vim'
Plugin 'tpope/vim-surround'

" JS
Plugin 'Shutnik/jshint2.vim'

" Elixir
Plugin 'slashmili/alchemist.vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'mattreduce/vim-mix'

" Color schemes
Plugin 'dracula/vim'
Plugin 'godlygeek/csapprox'
Plugin 'jscappini/material.vim'
"Plugin 'vim-airline/vim-airline-themes'
"Plugin 'bling/vim-airline'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jdkanani/vim-material-theme'

call vundle#end()

syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
set number
set ruler
filetype plugin indent on       " load file type plugins + indentation

" Whitespace
set nowrap                      " don't wrap lines
set tabstop=4 shiftwidth=4      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set list listchars=tab:\ \ ,trail:·

" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" Show (partial) command in the status line
set showcmd

" use comma as <Leader> key instead of backslash
" let mapleader=","

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Clipboard
imap <buffer><Tab> <C-Space>
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+p

" NERDTree
noremap <Leader>n :NERDTreeToggle<CR>

" Ignore long lines error
let g:pep8_ignore="E501,W601"
let g:flake8_ignore="E501"

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

let g:tagbar_autofocus = 0

noremap <C-e> :Eval <CR>
noremap E :%Eval <CR>

" GUI
set guifont=Hack\ 12
colorscheme dracula

" Python
let g:python_host_prog = '~/.pyenv/versions/2.7.13/bin/python'
let g:python3_host_prog = '~/.pyenv/versions/3.6.0/bin/python'

" Disable pylint checking every save
"let g:pymode_lint_write = 0

" Set key 'R' for run python code
"let g:pymode_run_key = 'R'

" Disable folding
"let g:pymode_folding = 0

" Lint
" Switch pylint or pyflakes code checker
" values (pylint, pyflakes)
"let g:pymode_lint_checker = "pyflakes"

" Don't let pyflakes use the quickfix window
"let g:pyflakes_use_quickfix = 0
"
" " Run pyflake8
" autocmd FileType python map <Leader>8 :call Flake8()<CR>
" " Run when saving py files
"autocmd BufWritePost *.py call Flake8()

" Clojure
au Filetype clojure nmap <c-c><c-k> :Require<cr>

function! TestToplevel() abort
    "Eval the toplevel clojure form (a deftest) and then test-var the result."
    normal! ^
    let line1 = searchpair('(','',')', 'bcrn', g:fireplace#skip)
    let line2 = searchpair('(','',')', 'rn', g:fireplace#skip)
    let expr = join(getline(line1, line2), "\n")
    let var = fireplace#session_eval(expr)
    let result = fireplace#echo_session_eval("(clojure.test/test-var " . var . ")")
    return result
endfunction

au Filetype clojure nmap <c-c><c-t> :call TestToplevel()<cr>

let g:clj_fmt_autosave = 0

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" JS
let jshint2_save = 1

" Markdown
autocmd BufNewFile,BufReadPost *.md,*.markdown set filetype=markdown
autocmd FileType markdown set tw=80

" CtrlP
map <leader>t :CtrlP<cr>
map <leader>T :CtrlPBuffer<cr>

" airline
"let g:airline_symbols = {}
"let g:airline_solarized_bg='dark'
"let g:airline_theme='solarized'
"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_linecolumn_prefix = '␊ '
"let g:airline_symbols.linenr = '␤ '
"let g:airline_linecolumn_prefix = '¶ '
"let g:airline_symbols.branch = '⎇ '
"let g:airline_symbols.paste = 'ρ'

"let g:airline_paste_symbol = 'Þ'
"let g:airline_paste_symbol = '∥'

"let g:airline#extensions#syntastic#enabled =1
"let g:airline#extensions#branch#enabled =1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#buffer_nr_show = 1

" TagBar
nmap <F8> :TagbarToggle<CR>
