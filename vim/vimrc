set nocompatible
filetype off

if has('nvim')
    let s:editor_root=expand("~/.config/nvim")
else
    let s:editor_root=expand("~/.vim")
endif

call plug#begin(s:editor_root . '/plugged')

" Navigation & UI
Plug 'kien/ctrlp.vim'
Plug 'wsdjeg/FlyGrep.vim'
Plug 'vim-airline/vim-airline'

" Misc programming
Plug 'scrooloose/syntastic'
Plug 'vim-scripts/ctags.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'chrisbra/csv.vim'
Plug 'euclio/gitignore.vim'
Plug 'yggdroot/indentline'
Plug 'janko/vim-test'
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'
Plug 'majutsushi/tagbar'
" Words in buffer completion
Plug 'ncm2/ncm2-bufword'
" Filepath completion
Plug 'ncm2/ncm2-path'
Plug 'tpope/vim-commentary'
Plug 'neomake/neomake'
Plug 'sbdchd/neoformat'

" Python
Plug 'davidhalter/jedi-vim'
" Fast python completion (use ncm2 if you want type info or snippet support)
Plug 'HansPinckaers/ncm2-jedi'
Plug 'tweekmonster/impsort.vim'

" Elixir
Plug 'slashmili/alchemist.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'mattreduce/vim-mix'

" Color schemes
Plug 'dracula/vim'

call plug#end()

set encoding=utf-8
set number
set ruler
filetype plugin indent on
syntax enable

set t_Co=256
set background=dark

" Whitespace
set nowrap
set tabstop=4 shiftwidth=4
set expandtab
set backspace=indent,eol,start
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full

" Status bar
set laststatus=2

" Show (partial) command in the status line
set showcmd

" use comma as <Leader> key instead of backslash
" let mapleader=","

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Clipboard
imap <buffer><Tab> <C-Space>
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+p

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

let g:tagbar_autofocus = 0

noremap <C-e> :Eval <CR>
noremap E :%Eval <CR>

" GUI
set guifont=Fira\ Code:h14
colorscheme dracula

" CtrlP
map <leader>t :CtrlP<cr>
map <leader>T :CtrlPBuffer<cr>

" TagBar
nmap <F8> :TagbarToggle<CR>

" Markdown
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'
let vim_markdown_preview_github=1

" indentline changes conceal
let g:indentLine_setConceal = 0

" nvim q
set guicursor=

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

let g:jedi#auto_initialization = 1
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"

let g:neomake_python_enabled_makers = ['pylint', 'bandit']

augroup fmt
  autocmd!
  autocmd BufWritePre * undojoin | Neoformat
augroup END
